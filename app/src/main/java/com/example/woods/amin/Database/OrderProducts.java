package com.example.woods.amin.Database;

import org.greenrobot.greendao.annotation.*;

import com.example.woods.amin.Database.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "ORDER_PRODUCTS".
 */
@Entity(active = true)
public class OrderProducts {

    @Id(autoincrement = true)
    private Long id;

    @NotNull
    private String price;
    private int count;
    private String off;
    private long product_id;
    private long order_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient OrderProductsDao myDao;

    @ToOne(joinProperty = "product_id")
    private Products orderProductProduct;

    @Generated
    private transient Long orderProductProduct__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public OrderProducts() {
    }

    public OrderProducts(Long id) {
        this.id = id;
    }

    @Generated
    public OrderProducts(Long id, String price, int count, String off, long product_id, long order_id) {
        this.id = id;
        this.price = price;
        this.count = count;
        this.off = off;
        this.product_id = product_id;
        this.order_id = order_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOrderProductsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getPrice() {
        return price;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPrice(@NotNull String price) {
        this.price = price;
    }

    public int getCount() {
        return count;
    }

    public void setCount(int count) {
        this.count = count;
    }

    public String getOff() {
        return off;
    }

    public void setOff(String off) {
        this.off = off;
    }

    public long getProduct_id() {
        return product_id;
    }

    public void setProduct_id(long product_id) {
        this.product_id = product_id;
    }

    public long getOrder_id() {
        return order_id;
    }

    public void setOrder_id(long order_id) {
        this.order_id = order_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Products getOrderProductProduct() {
        long __key = this.product_id;
        if (orderProductProduct__resolvedKey == null || !orderProductProduct__resolvedKey.equals(__key)) {
            __throwIfDetached();
            ProductsDao targetDao = daoSession.getProductsDao();
            Products orderProductProductNew = targetDao.load(__key);
            synchronized (this) {
                orderProductProduct = orderProductProductNew;
            	orderProductProduct__resolvedKey = __key;
            }
        }
        return orderProductProduct;
    }

    @Generated
    public void setOrderProductProduct(Products orderProductProduct) {
        if (orderProductProduct == null) {
            throw new DaoException("To-one property 'product_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.orderProductProduct = orderProductProduct;
            product_id = orderProductProduct.getId();
            orderProductProduct__resolvedKey = product_id;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
