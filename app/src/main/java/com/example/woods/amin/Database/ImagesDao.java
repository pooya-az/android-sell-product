package com.example.woods.amin.Database;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IMAGES".
*/
public class ImagesDao extends AbstractDao<Images, Long> {

    public static final String TABLENAME = "IMAGES";

    /**
     * Properties of entity Images.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Uri = new Property(1, String.class, "uri", false, "URI");
        public final static Property Primary = new Property(2, Boolean.class, "primary", false, "PRIMARY");
        public final static Property Enable = new Property(3, Boolean.class, "enable", false, "ENABLE");
        public final static Property Product_id = new Property(4, long.class, "product_id", false, "PRODUCT_ID");
    }

    private Query<Images> products_ProductImagesQuery;

    public ImagesDao(DaoConfig config) {
        super(config);
    }
    
    public ImagesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IMAGES\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"URI\" TEXT," + // 1: uri
                "\"PRIMARY\" INTEGER," + // 2: primary
                "\"ENABLE\" INTEGER," + // 3: enable
                "\"PRODUCT_ID\" INTEGER NOT NULL );"); // 4: product_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IMAGES\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Images entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uri = entity.getUri();
        if (uri != null) {
            stmt.bindString(2, uri);
        }
 
        Boolean primary = entity.getPrimary();
        if (primary != null) {
            stmt.bindLong(3, primary ? 1L: 0L);
        }
 
        Boolean enable = entity.getEnable();
        if (enable != null) {
            stmt.bindLong(4, enable ? 1L: 0L);
        }
        stmt.bindLong(5, entity.getProduct_id());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Images entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String uri = entity.getUri();
        if (uri != null) {
            stmt.bindString(2, uri);
        }
 
        Boolean primary = entity.getPrimary();
        if (primary != null) {
            stmt.bindLong(3, primary ? 1L: 0L);
        }
 
        Boolean enable = entity.getEnable();
        if (enable != null) {
            stmt.bindLong(4, enable ? 1L: 0L);
        }
        stmt.bindLong(5, entity.getProduct_id());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Images readEntity(Cursor cursor, int offset) {
        Images entity = new Images( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // uri
            cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0, // primary
            cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0, // enable
            cursor.getLong(offset + 4) // product_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Images entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUri(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPrimary(cursor.isNull(offset + 2) ? null : cursor.getShort(offset + 2) != 0);
        entity.setEnable(cursor.isNull(offset + 3) ? null : cursor.getShort(offset + 3) != 0);
        entity.setProduct_id(cursor.getLong(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Images entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Images entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Images entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "productImages" to-many relationship of Products. */
    public List<Images> _queryProducts_ProductImages(long product_id) {
        synchronized (this) {
            if (products_ProductImagesQuery == null) {
                QueryBuilder<Images> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Product_id.eq(null));
                products_ProductImagesQuery = queryBuilder.build();
            }
        }
        Query<Images> query = products_ProductImagesQuery.forCurrentThread();
        query.setParameter(0, product_id);
        return query.list();
    }

}
