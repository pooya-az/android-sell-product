package com.example.woods.amin.Database;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.example.woods.amin.Database.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "PRODUCTS".
 */
@Entity(active = true)
public class Products {

    @Id(autoincrement = true)
    private Long id;

    @NotNull
    private String title;

    @NotNull
    private String info;

    @NotNull
    private String price;
    private int count;
    private String off;

    @NotNull
    private java.util.Date create;

    @NotNull
    private java.util.Date update;
    private boolean top;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient ProductsDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "product_id")
    })
    private List<Images> productImages;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Products() {
    }

    public Products(Long id) {
        this.id = id;
    }

    @Generated
    public Products(Long id, String title, String info, String price, int count, String off, java.util.Date create, java.util.Date update, boolean top) {
        this.id = id;
        this.title = title;
        this.info = info;
        this.price = price;
        this.count = count;
        this.off = off;
        this.create = create;
        this.update = update;
        this.top = top;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getProductsDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(@NotNull String title) {
        this.title = title;
    }

    @NotNull
    public String getInfo() {
        return info;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setInfo(@NotNull String info) {
        this.info = info;
    }

    @NotNull
    public String getPrice() {
        return price;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPrice(@NotNull String price) {
        this.price = price;
    }

    public int getCount() {
        return count;
    }

    public void setCount(int count) {
        this.count = count;
    }

    public String getOff() {
        return off;
    }

    public void setOff(String off) {
        this.off = off;
    }

    @NotNull
    public java.util.Date getCreate() {
        return create;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreate(@NotNull java.util.Date create) {
        this.create = create;
    }

    @NotNull
    public java.util.Date getUpdate() {
        return update;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUpdate(@NotNull java.util.Date update) {
        this.update = update;
    }

    public boolean getTop() {
        return top;
    }

    public void setTop(boolean top) {
        this.top = top;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Images> getProductImages() {
        if (productImages == null) {
            __throwIfDetached();
            ImagesDao targetDao = daoSession.getImagesDao();
            List<Images> productImagesNew = targetDao._queryProducts_ProductImages(id);
            synchronized (this) {
                if(productImages == null) {
                    productImages = productImagesNew;
                }
            }
        }
        return productImages;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetProductImages() {
        productImages = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
