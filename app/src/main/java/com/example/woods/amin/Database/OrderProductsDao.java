package com.example.woods.amin.Database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ORDER_PRODUCTS".
*/
public class OrderProductsDao extends AbstractDao<OrderProducts, Long> {

    public static final String TABLENAME = "ORDER_PRODUCTS";

    /**
     * Properties of entity OrderProducts.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Price = new Property(1, String.class, "price", false, "PRICE");
        public final static Property Count = new Property(2, int.class, "count", false, "COUNT");
        public final static Property Off = new Property(3, String.class, "off", false, "OFF");
        public final static Property Product_id = new Property(4, long.class, "product_id", false, "PRODUCT_ID");
        public final static Property Order_id = new Property(5, long.class, "order_id", false, "ORDER_ID");
    }

    private DaoSession daoSession;

    private Query<OrderProducts> orders_OrderOrderProductsQuery;

    public OrderProductsDao(DaoConfig config) {
        super(config);
    }
    
    public OrderProductsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ORDER_PRODUCTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"PRICE\" TEXT NOT NULL ," + // 1: price
                "\"COUNT\" INTEGER NOT NULL ," + // 2: count
                "\"OFF\" TEXT," + // 3: off
                "\"PRODUCT_ID\" INTEGER NOT NULL ," + // 4: product_id
                "\"ORDER_ID\" INTEGER NOT NULL );"); // 5: order_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ORDER_PRODUCTS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, OrderProducts entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPrice());
        stmt.bindLong(3, entity.getCount());
 
        String off = entity.getOff();
        if (off != null) {
            stmt.bindString(4, off);
        }
        stmt.bindLong(5, entity.getProduct_id());
        stmt.bindLong(6, entity.getOrder_id());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, OrderProducts entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getPrice());
        stmt.bindLong(3, entity.getCount());
 
        String off = entity.getOff();
        if (off != null) {
            stmt.bindString(4, off);
        }
        stmt.bindLong(5, entity.getProduct_id());
        stmt.bindLong(6, entity.getOrder_id());
    }

    @Override
    protected final void attachEntity(OrderProducts entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public OrderProducts readEntity(Cursor cursor, int offset) {
        OrderProducts entity = new OrderProducts( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // price
            cursor.getInt(offset + 2), // count
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // off
            cursor.getLong(offset + 4), // product_id
            cursor.getLong(offset + 5) // order_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, OrderProducts entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPrice(cursor.getString(offset + 1));
        entity.setCount(cursor.getInt(offset + 2));
        entity.setOff(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setProduct_id(cursor.getLong(offset + 4));
        entity.setOrder_id(cursor.getLong(offset + 5));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(OrderProducts entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(OrderProducts entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(OrderProducts entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "orderOrderProducts" to-many relationship of Orders. */
    public List<OrderProducts> _queryOrders_OrderOrderProducts(long order_id) {
        synchronized (this) {
            if (orders_OrderOrderProductsQuery == null) {
                QueryBuilder<OrderProducts> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.Order_id.eq(null));
                orders_OrderOrderProductsQuery = queryBuilder.build();
            }
        }
        Query<OrderProducts> query = orders_OrderOrderProductsQuery.forCurrentThread();
        query.setParameter(0, order_id);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getProductsDao().getAllColumns());
            builder.append(" FROM ORDER_PRODUCTS T");
            builder.append(" LEFT JOIN PRODUCTS T0 ON T.\"PRODUCT_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected OrderProducts loadCurrentDeep(Cursor cursor, boolean lock) {
        OrderProducts entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Products orderProductProduct = loadCurrentOther(daoSession.getProductsDao(), cursor, offset);
         if(orderProductProduct != null) {
            entity.setOrderProductProduct(orderProductProduct);
        }

        return entity;    
    }

    public OrderProducts loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<OrderProducts> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<OrderProducts> list = new ArrayList<OrderProducts>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<OrderProducts> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<OrderProducts> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
