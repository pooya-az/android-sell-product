package com.example.woods.amin.Database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "PRODUCTS".
*/
public class ProductsDao extends AbstractDao<Products, Long> {

    public static final String TABLENAME = "PRODUCTS";

    /**
     * Properties of entity Products.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Title = new Property(1, String.class, "title", false, "TITLE");
        public final static Property Info = new Property(2, String.class, "info", false, "INFO");
        public final static Property Price = new Property(3, String.class, "price", false, "PRICE");
        public final static Property Count = new Property(4, int.class, "count", false, "COUNT");
        public final static Property Off = new Property(5, String.class, "off", false, "OFF");
        public final static Property Create = new Property(6, java.util.Date.class, "create", false, "CREATE");
        public final static Property Update = new Property(7, java.util.Date.class, "update", false, "UPDATE");
        public final static Property Top = new Property(8, boolean.class, "top", false, "TOP");
    }

    private DaoSession daoSession;


    public ProductsDao(DaoConfig config) {
        super(config);
    }
    
    public ProductsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"PRODUCTS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TITLE\" TEXT NOT NULL ," + // 1: title
                "\"INFO\" TEXT NOT NULL ," + // 2: info
                "\"PRICE\" TEXT NOT NULL ," + // 3: price
                "\"COUNT\" INTEGER NOT NULL ," + // 4: count
                "\"OFF\" TEXT," + // 5: off
                "\"CREATE\" INTEGER NOT NULL ," + // 6: create
                "\"UPDATE\" INTEGER NOT NULL ," + // 7: update
                "\"TOP\" INTEGER NOT NULL );"); // 8: top
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"PRODUCTS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Products entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
        stmt.bindString(3, entity.getInfo());
        stmt.bindString(4, entity.getPrice());
        stmt.bindLong(5, entity.getCount());
 
        String off = entity.getOff();
        if (off != null) {
            stmt.bindString(6, off);
        }
        stmt.bindLong(7, entity.getCreate().getTime());
        stmt.bindLong(8, entity.getUpdate().getTime());
        stmt.bindLong(9, entity.getTop() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Products entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindString(2, entity.getTitle());
        stmt.bindString(3, entity.getInfo());
        stmt.bindString(4, entity.getPrice());
        stmt.bindLong(5, entity.getCount());
 
        String off = entity.getOff();
        if (off != null) {
            stmt.bindString(6, off);
        }
        stmt.bindLong(7, entity.getCreate().getTime());
        stmt.bindLong(8, entity.getUpdate().getTime());
        stmt.bindLong(9, entity.getTop() ? 1L: 0L);
    }

    @Override
    protected final void attachEntity(Products entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Products readEntity(Cursor cursor, int offset) {
        Products entity = new Products( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getString(offset + 1), // title
            cursor.getString(offset + 2), // info
            cursor.getString(offset + 3), // price
            cursor.getInt(offset + 4), // count
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // off
            new java.util.Date(cursor.getLong(offset + 6)), // create
            new java.util.Date(cursor.getLong(offset + 7)), // update
            cursor.getShort(offset + 8) != 0 // top
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Products entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTitle(cursor.getString(offset + 1));
        entity.setInfo(cursor.getString(offset + 2));
        entity.setPrice(cursor.getString(offset + 3));
        entity.setCount(cursor.getInt(offset + 4));
        entity.setOff(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreate(new java.util.Date(cursor.getLong(offset + 6)));
        entity.setUpdate(new java.util.Date(cursor.getLong(offset + 7)));
        entity.setTop(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Products entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Products entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Products entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
