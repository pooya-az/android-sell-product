package com.example.woods.amin.Database;

import org.greenrobot.greendao.annotation.*;

import com.example.woods.amin.Database.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "SCHEDULES".
 */
@Entity(active = true)
public class Schedules {

    @Id(autoincrement = true)
    private Long id;

    @NotNull
    private String title;
    private String description;

    @NotNull
    private String unix_time;
    private boolean enable;
    private long user_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient SchedulesDao myDao;

    @ToOne(joinProperty = "user_id")
    private Users userSchedules;

    @Generated
    private transient Long userSchedules__resolvedKey;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Schedules() {
    }

    public Schedules(Long id) {
        this.id = id;
    }

    @Generated
    public Schedules(Long id, String title, String description, String unix_time, boolean enable, long user_id) {
        this.id = id;
        this.title = title;
        this.description = description;
        this.unix_time = unix_time;
        this.enable = enable;
        this.user_id = user_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSchedulesDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(@NotNull String title) {
        this.title = title;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    @NotNull
    public String getUnix_time() {
        return unix_time;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setUnix_time(@NotNull String unix_time) {
        this.unix_time = unix_time;
    }

    public boolean getEnable() {
        return enable;
    }

    public void setEnable(boolean enable) {
        this.enable = enable;
    }

    public long getUser_id() {
        return user_id;
    }

    public void setUser_id(long user_id) {
        this.user_id = user_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Users getUserSchedules() {
        long __key = this.user_id;
        if (userSchedules__resolvedKey == null || !userSchedules__resolvedKey.equals(__key)) {
            __throwIfDetached();
            UsersDao targetDao = daoSession.getUsersDao();
            Users userSchedulesNew = targetDao.load(__key);
            synchronized (this) {
                userSchedules = userSchedulesNew;
            	userSchedules__resolvedKey = __key;
            }
        }
        return userSchedules;
    }

    @Generated
    public void setUserSchedules(Users userSchedules) {
        if (userSchedules == null) {
            throw new DaoException("To-one property 'user_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.userSchedules = userSchedules;
            user_id = userSchedules.getId();
            userSchedules__resolvedKey = user_id;
        }
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
