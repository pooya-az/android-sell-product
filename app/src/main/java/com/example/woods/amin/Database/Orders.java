package com.example.woods.amin.Database;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.example.woods.amin.Database.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "ORDERS".
 */
@Entity(active = true)
public class Orders {

    @Id(autoincrement = true)
    private Long id;
    private String first_price;
    private String last_price;
    private String off;
    private int status;
    private java.util.Date create;
    private long user_id;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient OrdersDao myDao;

    @ToOne(joinProperty = "user_id")
    private Users orderUsers;

    @Generated
    private transient Long orderUsers__resolvedKey;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "order_id")
    })
    private List<OrderProducts> orderOrderProducts;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Orders() {
    }

    public Orders(Long id) {
        this.id = id;
    }

    @Generated
    public Orders(Long id, String first_price, String last_price, String off, int status, java.util.Date create, long user_id) {
        this.id = id;
        this.first_price = first_price;
        this.last_price = last_price;
        this.off = off;
        this.status = status;
        this.create = create;
        this.user_id = user_id;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getOrdersDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getFirst_price() {
        return first_price;
    }

    public void setFirst_price(String first_price) {
        this.first_price = first_price;
    }

    public String getLast_price() {
        return last_price;
    }

    public void setLast_price(String last_price) {
        this.last_price = last_price;
    }

    public String getOff() {
        return off;
    }

    public void setOff(String off) {
        this.off = off;
    }

    public int getStatus() {
        return status;
    }

    public void setStatus(int status) {
        this.status = status;
    }

    public java.util.Date getCreate() {
        return create;
    }

    public void setCreate(java.util.Date create) {
        this.create = create;
    }

    public long getUser_id() {
        return user_id;
    }

    public void setUser_id(long user_id) {
        this.user_id = user_id;
    }

    /** To-one relationship, resolved on first access. */
    @Generated
    public Users getOrderUsers() {
        long __key = this.user_id;
        if (orderUsers__resolvedKey == null || !orderUsers__resolvedKey.equals(__key)) {
            __throwIfDetached();
            UsersDao targetDao = daoSession.getUsersDao();
            Users orderUsersNew = targetDao.load(__key);
            synchronized (this) {
                orderUsers = orderUsersNew;
            	orderUsers__resolvedKey = __key;
            }
        }
        return orderUsers;
    }

    @Generated
    public void setOrderUsers(Users orderUsers) {
        if (orderUsers == null) {
            throw new DaoException("To-one property 'user_id' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.orderUsers = orderUsers;
            user_id = orderUsers.getId();
            orderUsers__resolvedKey = user_id;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<OrderProducts> getOrderOrderProducts() {
        if (orderOrderProducts == null) {
            __throwIfDetached();
            OrderProductsDao targetDao = daoSession.getOrderProductsDao();
            List<OrderProducts> orderOrderProductsNew = targetDao._queryOrders_OrderOrderProducts(id);
            synchronized (this) {
                if(orderOrderProducts == null) {
                    orderOrderProducts = orderOrderProductsNew;
                }
            }
        }
        return orderOrderProducts;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetOrderOrderProducts() {
        orderOrderProducts = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
