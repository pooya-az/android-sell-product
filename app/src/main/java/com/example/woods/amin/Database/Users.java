package com.example.woods.amin.Database;

import org.greenrobot.greendao.annotation.*;

import java.util.List;
import com.example.woods.amin.Database.DaoSession;
import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END

/**
 * Entity mapped to table "USERS".
 */
@Entity(active = true)
public class Users {

    @Id(autoincrement = true)
    private Long id;

    @NotNull
    private String name;

    @NotNull
    private String address;

    @NotNull
    private String phone;

    @NotNull
    private String mobile;

    @NotNull
    private java.util.Date create;

    /** Used to resolve relations */
    @Generated
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    @Generated
    private transient UsersDao myDao;

    @ToMany(joinProperties = {
        @JoinProperty(name = "id", referencedName = "user_id")
    })
    private List<Orders> userOrders;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated
    public Users() {
    }

    public Users(Long id) {
        this.id = id;
    }

    @Generated
    public Users(Long id, String name, String address, String phone, String mobile, java.util.Date create) {
        this.id = id;
        this.name = name;
        this.address = address;
        this.phone = phone;
        this.mobile = mobile;
        this.create = create;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getUsersDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getName() {
        return name;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setName(@NotNull String name) {
        this.name = name;
    }

    @NotNull
    public String getAddress() {
        return address;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setAddress(@NotNull String address) {
        this.address = address;
    }

    @NotNull
    public String getPhone() {
        return phone;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPhone(@NotNull String phone) {
        this.phone = phone;
    }

    @NotNull
    public String getMobile() {
        return mobile;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setMobile(@NotNull String mobile) {
        this.mobile = mobile;
    }

    @NotNull
    public java.util.Date getCreate() {
        return create;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setCreate(@NotNull java.util.Date create) {
        this.create = create;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    @Generated
    public List<Orders> getUserOrders() {
        if (userOrders == null) {
            __throwIfDetached();
            OrdersDao targetDao = daoSession.getOrdersDao();
            List<Orders> userOrdersNew = targetDao._queryUsers_UserOrders(id);
            synchronized (this) {
                if(userOrders == null) {
                    userOrders = userOrdersNew;
                }
            }
        }
        return userOrders;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated
    public synchronized void resetUserOrders() {
        userOrders = null;
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void delete() {
        __throwIfDetached();
        myDao.delete(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void update() {
        __throwIfDetached();
        myDao.update(this);
    }

    /**
    * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
    * Entity must attached to an entity context.
    */
    @Generated
    public void refresh() {
        __throwIfDetached();
        myDao.refresh(this);
    }

    @Generated
    private void __throwIfDetached() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
